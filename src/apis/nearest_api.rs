/*
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct NearestApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> NearestApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> NearestApiClient<C> {
        NearestApiClient {
            configuration,
        }
    }
}

pub trait NearestApi {
    fn nearest(&self, coordinates: &str, generate_hints: Option<&str>, exclude: Option<&str>, bearings: Option<&str>, radiuses: Option<&str>, approaches: Option<&str>, number: Option<i32>) -> Box<dyn Future<Item = crate::models::DirectionsNearest, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>NearestApi for NearestApiClient<C> {
    fn nearest(&self, coordinates: &str, generate_hints: Option<&str>, exclude: Option<&str>, bearings: Option<&str>, radiuses: Option<&str>, approaches: Option<&str>, number: Option<i32>) -> Box<dyn Future<Item = crate::models::DirectionsNearest, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/nearest/driving/{coordinates}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "key".to_owned(),
            }))
        ;
        if let Some(ref s) = generate_hints {
            req = req.with_query_param("generate_hints".to_string(), s.to_string());
        }
        if let Some(ref s) = exclude {
            req = req.with_query_param("exclude".to_string(), s.to_string());
        }
        if let Some(ref s) = bearings {
            req = req.with_query_param("bearings".to_string(), s.to_string());
        }
        if let Some(ref s) = radiuses {
            req = req.with_query_param("radiuses".to_string(), s.to_string());
        }
        if let Some(ref s) = approaches {
            req = req.with_query_param("approaches".to_string(), s.to_string());
        }
        if let Some(ref s) = number {
            req = req.with_query_param("number".to_string(), s.to_string());
        }
        req = req.with_path_param("coordinates".to_string(), coordinates.to_string());

        req.execute(self.configuration.borrow())
    }

}
