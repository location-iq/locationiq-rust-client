/* 
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Address {
  #[serde(rename = "house_number")]
  house_number: Option<String>,
  #[serde(rename = "road")]
  road: Option<String>,
  #[serde(rename = "residential")]
  residential: Option<String>,
  #[serde(rename = "borough")]
  borough: Option<String>,
  #[serde(rename = "neighbourhood")]
  neighbourhood: Option<String>,
  #[serde(rename = "quarter")]
  quarter: Option<String>,
  #[serde(rename = "hamlet")]
  hamlet: Option<String>,
  #[serde(rename = "suburb")]
  suburb: Option<String>,
  #[serde(rename = "island")]
  island: Option<String>,
  #[serde(rename = "village")]
  village: Option<String>,
  #[serde(rename = "town")]
  town: Option<String>,
  #[serde(rename = "city")]
  city: Option<String>,
  #[serde(rename = "city_district")]
  city_district: Option<String>,
  #[serde(rename = "county")]
  county: Option<String>,
  #[serde(rename = "state")]
  state: Option<String>,
  #[serde(rename = "state_district")]
  state_district: Option<String>,
  #[serde(rename = "postcode")]
  postcode: Option<String>,
  #[serde(rename = "country")]
  country: Option<String>,
  #[serde(rename = "country_code")]
  country_code: Option<String>,
  #[serde(rename = "state_code")]
  state_code: Option<String>
}

impl Address {
  pub fn new() -> Address {
    Address {
      house_number: None,
      road: None,
      residential: None,
      borough: None,
      neighbourhood: None,
      quarter: None,
      hamlet: None,
      suburb: None,
      island: None,
      village: None,
      town: None,
      city: None,
      city_district: None,
      county: None,
      state: None,
      state_district: None,
      postcode: None,
      country: None,
      country_code: None,
      state_code: None
    }
  }

  pub fn set_house_number(&mut self, house_number: String) {
    self.house_number = Some(house_number);
  }

  pub fn with_house_number(mut self, house_number: String) -> Address {
    self.house_number = Some(house_number);
    self
  }

  pub fn house_number(&self) -> Option<&String> {
    self.house_number.as_ref()
  }

  pub fn reset_house_number(&mut self) {
    self.house_number = None;
  }

  pub fn set_road(&mut self, road: String) {
    self.road = Some(road);
  }

  pub fn with_road(mut self, road: String) -> Address {
    self.road = Some(road);
    self
  }

  pub fn road(&self) -> Option<&String> {
    self.road.as_ref()
  }

  pub fn reset_road(&mut self) {
    self.road = None;
  }

  pub fn set_residential(&mut self, residential: String) {
    self.residential = Some(residential);
  }

  pub fn with_residential(mut self, residential: String) -> Address {
    self.residential = Some(residential);
    self
  }

  pub fn residential(&self) -> Option<&String> {
    self.residential.as_ref()
  }

  pub fn reset_residential(&mut self) {
    self.residential = None;
  }

  pub fn set_borough(&mut self, borough: String) {
    self.borough = Some(borough);
  }

  pub fn with_borough(mut self, borough: String) -> Address {
    self.borough = Some(borough);
    self
  }

  pub fn borough(&self) -> Option<&String> {
    self.borough.as_ref()
  }

  pub fn reset_borough(&mut self) {
    self.borough = None;
  }

  pub fn set_neighbourhood(&mut self, neighbourhood: String) {
    self.neighbourhood = Some(neighbourhood);
  }

  pub fn with_neighbourhood(mut self, neighbourhood: String) -> Address {
    self.neighbourhood = Some(neighbourhood);
    self
  }

  pub fn neighbourhood(&self) -> Option<&String> {
    self.neighbourhood.as_ref()
  }

  pub fn reset_neighbourhood(&mut self) {
    self.neighbourhood = None;
  }

  pub fn set_quarter(&mut self, quarter: String) {
    self.quarter = Some(quarter);
  }

  pub fn with_quarter(mut self, quarter: String) -> Address {
    self.quarter = Some(quarter);
    self
  }

  pub fn quarter(&self) -> Option<&String> {
    self.quarter.as_ref()
  }

  pub fn reset_quarter(&mut self) {
    self.quarter = None;
  }

  pub fn set_hamlet(&mut self, hamlet: String) {
    self.hamlet = Some(hamlet);
  }

  pub fn with_hamlet(mut self, hamlet: String) -> Address {
    self.hamlet = Some(hamlet);
    self
  }

  pub fn hamlet(&self) -> Option<&String> {
    self.hamlet.as_ref()
  }

  pub fn reset_hamlet(&mut self) {
    self.hamlet = None;
  }

  pub fn set_suburb(&mut self, suburb: String) {
    self.suburb = Some(suburb);
  }

  pub fn with_suburb(mut self, suburb: String) -> Address {
    self.suburb = Some(suburb);
    self
  }

  pub fn suburb(&self) -> Option<&String> {
    self.suburb.as_ref()
  }

  pub fn reset_suburb(&mut self) {
    self.suburb = None;
  }

  pub fn set_island(&mut self, island: String) {
    self.island = Some(island);
  }

  pub fn with_island(mut self, island: String) -> Address {
    self.island = Some(island);
    self
  }

  pub fn island(&self) -> Option<&String> {
    self.island.as_ref()
  }

  pub fn reset_island(&mut self) {
    self.island = None;
  }

  pub fn set_village(&mut self, village: String) {
    self.village = Some(village);
  }

  pub fn with_village(mut self, village: String) -> Address {
    self.village = Some(village);
    self
  }

  pub fn village(&self) -> Option<&String> {
    self.village.as_ref()
  }

  pub fn reset_village(&mut self) {
    self.village = None;
  }

  pub fn set_town(&mut self, town: String) {
    self.town = Some(town);
  }

  pub fn with_town(mut self, town: String) -> Address {
    self.town = Some(town);
    self
  }

  pub fn town(&self) -> Option<&String> {
    self.town.as_ref()
  }

  pub fn reset_town(&mut self) {
    self.town = None;
  }

  pub fn set_city(&mut self, city: String) {
    self.city = Some(city);
  }

  pub fn with_city(mut self, city: String) -> Address {
    self.city = Some(city);
    self
  }

  pub fn city(&self) -> Option<&String> {
    self.city.as_ref()
  }

  pub fn reset_city(&mut self) {
    self.city = None;
  }

  pub fn set_city_district(&mut self, city_district: String) {
    self.city_district = Some(city_district);
  }

  pub fn with_city_district(mut self, city_district: String) -> Address {
    self.city_district = Some(city_district);
    self
  }

  pub fn city_district(&self) -> Option<&String> {
    self.city_district.as_ref()
  }

  pub fn reset_city_district(&mut self) {
    self.city_district = None;
  }

  pub fn set_county(&mut self, county: String) {
    self.county = Some(county);
  }

  pub fn with_county(mut self, county: String) -> Address {
    self.county = Some(county);
    self
  }

  pub fn county(&self) -> Option<&String> {
    self.county.as_ref()
  }

  pub fn reset_county(&mut self) {
    self.county = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> Address {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_state_district(&mut self, state_district: String) {
    self.state_district = Some(state_district);
  }

  pub fn with_state_district(mut self, state_district: String) -> Address {
    self.state_district = Some(state_district);
    self
  }

  pub fn state_district(&self) -> Option<&String> {
    self.state_district.as_ref()
  }

  pub fn reset_state_district(&mut self) {
    self.state_district = None;
  }

  pub fn set_postcode(&mut self, postcode: String) {
    self.postcode = Some(postcode);
  }

  pub fn with_postcode(mut self, postcode: String) -> Address {
    self.postcode = Some(postcode);
    self
  }

  pub fn postcode(&self) -> Option<&String> {
    self.postcode.as_ref()
  }

  pub fn reset_postcode(&mut self) {
    self.postcode = None;
  }

  pub fn set_country(&mut self, country: String) {
    self.country = Some(country);
  }

  pub fn with_country(mut self, country: String) -> Address {
    self.country = Some(country);
    self
  }

  pub fn country(&self) -> Option<&String> {
    self.country.as_ref()
  }

  pub fn reset_country(&mut self) {
    self.country = None;
  }

  pub fn set_country_code(&mut self, country_code: String) {
    self.country_code = Some(country_code);
  }

  pub fn with_country_code(mut self, country_code: String) -> Address {
    self.country_code = Some(country_code);
    self
  }

  pub fn country_code(&self) -> Option<&String> {
    self.country_code.as_ref()
  }

  pub fn reset_country_code(&mut self) {
    self.country_code = None;
  }

  pub fn set_state_code(&mut self, state_code: String) {
    self.state_code = Some(state_code);
  }

  pub fn with_state_code(mut self, state_code: String) -> Address {
    self.state_code = Some(state_code);
    self
  }

  pub fn state_code(&self) -> Option<&String> {
    self.state_code.as_ref()
  }

  pub fn reset_state_code(&mut self) {
    self.state_code = None;
  }

}



