/*
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Address {
    #[serde(rename = "house_number", skip_serializing_if = "Option::is_none")]
    pub house_number: Option<String>,
    #[serde(rename = "road", skip_serializing_if = "Option::is_none")]
    pub road: Option<String>,
    #[serde(rename = "residential", skip_serializing_if = "Option::is_none")]
    pub residential: Option<String>,
    #[serde(rename = "borough", skip_serializing_if = "Option::is_none")]
    pub borough: Option<String>,
    #[serde(rename = "neighbourhood", skip_serializing_if = "Option::is_none")]
    pub neighbourhood: Option<String>,
    #[serde(rename = "quarter", skip_serializing_if = "Option::is_none")]
    pub quarter: Option<String>,
    #[serde(rename = "hamlet", skip_serializing_if = "Option::is_none")]
    pub hamlet: Option<String>,
    #[serde(rename = "suburb", skip_serializing_if = "Option::is_none")]
    pub suburb: Option<String>,
    #[serde(rename = "island", skip_serializing_if = "Option::is_none")]
    pub island: Option<String>,
    #[serde(rename = "village", skip_serializing_if = "Option::is_none")]
    pub village: Option<String>,
    #[serde(rename = "town", skip_serializing_if = "Option::is_none")]
    pub town: Option<String>,
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(rename = "city_district", skip_serializing_if = "Option::is_none")]
    pub city_district: Option<String>,
    #[serde(rename = "county", skip_serializing_if = "Option::is_none")]
    pub county: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "state_district", skip_serializing_if = "Option::is_none")]
    pub state_district: Option<String>,
    #[serde(rename = "postcode", skip_serializing_if = "Option::is_none")]
    pub postcode: Option<String>,
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "country_code", skip_serializing_if = "Option::is_none")]
    pub country_code: Option<String>,
    #[serde(rename = "state_code", skip_serializing_if = "Option::is_none")]
    pub state_code: Option<String>,
}

impl Address {
    pub fn new() -> Address {
        Address {
            house_number: None,
            road: None,
            residential: None,
            borough: None,
            neighbourhood: None,
            quarter: None,
            hamlet: None,
            suburb: None,
            island: None,
            village: None,
            town: None,
            city: None,
            city_district: None,
            county: None,
            state: None,
            state_district: None,
            postcode: None,
            country: None,
            country_code: None,
            state_code: None,
        }
    }
}


