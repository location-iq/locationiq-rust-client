/* 
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Address {
  #[serde(rename = "house_number")]
  house_number: Option<String>,
  #[serde(rename = "road")]
  road: Option<String>,
  #[serde(rename = "residential")]
  residential: Option<String>,
  #[serde(rename = "village")]
  village: Option<String>,
  #[serde(rename = "county")]
  county: Option<String>,
  #[serde(rename = "state")]
  state: Option<String>,
  #[serde(rename = "postcode")]
  postcode: Option<String>,
  #[serde(rename = "country")]
  country: Option<String>,
  #[serde(rename = "country_code")]
  country_code: Option<String>,
  #[serde(rename = "city")]
  city: Option<String>
}

impl Address {
  pub fn new() -> Address {
    Address {
      house_number: None,
      road: None,
      residential: None,
      village: None,
      county: None,
      state: None,
      postcode: None,
      country: None,
      country_code: None,
      city: None
    }
  }

  pub fn set_house_number(&mut self, house_number: String) {
    self.house_number = Some(house_number);
  }

  pub fn with_house_number(mut self, house_number: String) -> Address {
    self.house_number = Some(house_number);
    self
  }

  pub fn house_number(&self) -> Option<&String> {
    self.house_number.as_ref()
  }

  pub fn reset_house_number(&mut self) {
    self.house_number = None;
  }

  pub fn set_road(&mut self, road: String) {
    self.road = Some(road);
  }

  pub fn with_road(mut self, road: String) -> Address {
    self.road = Some(road);
    self
  }

  pub fn road(&self) -> Option<&String> {
    self.road.as_ref()
  }

  pub fn reset_road(&mut self) {
    self.road = None;
  }

  pub fn set_residential(&mut self, residential: String) {
    self.residential = Some(residential);
  }

  pub fn with_residential(mut self, residential: String) -> Address {
    self.residential = Some(residential);
    self
  }

  pub fn residential(&self) -> Option<&String> {
    self.residential.as_ref()
  }

  pub fn reset_residential(&mut self) {
    self.residential = None;
  }

  pub fn set_village(&mut self, village: String) {
    self.village = Some(village);
  }

  pub fn with_village(mut self, village: String) -> Address {
    self.village = Some(village);
    self
  }

  pub fn village(&self) -> Option<&String> {
    self.village.as_ref()
  }

  pub fn reset_village(&mut self) {
    self.village = None;
  }

  pub fn set_county(&mut self, county: String) {
    self.county = Some(county);
  }

  pub fn with_county(mut self, county: String) -> Address {
    self.county = Some(county);
    self
  }

  pub fn county(&self) -> Option<&String> {
    self.county.as_ref()
  }

  pub fn reset_county(&mut self) {
    self.county = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> Address {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_postcode(&mut self, postcode: String) {
    self.postcode = Some(postcode);
  }

  pub fn with_postcode(mut self, postcode: String) -> Address {
    self.postcode = Some(postcode);
    self
  }

  pub fn postcode(&self) -> Option<&String> {
    self.postcode.as_ref()
  }

  pub fn reset_postcode(&mut self) {
    self.postcode = None;
  }

  pub fn set_country(&mut self, country: String) {
    self.country = Some(country);
  }

  pub fn with_country(mut self, country: String) -> Address {
    self.country = Some(country);
    self
  }

  pub fn country(&self) -> Option<&String> {
    self.country.as_ref()
  }

  pub fn reset_country(&mut self) {
    self.country = None;
  }

  pub fn set_country_code(&mut self, country_code: String) {
    self.country_code = Some(country_code);
  }

  pub fn with_country_code(mut self, country_code: String) -> Address {
    self.country_code = Some(country_code);
    self
  }

  pub fn country_code(&self) -> Option<&String> {
    self.country_code.as_ref()
  }

  pub fn reset_country_code(&mut self) {
    self.country_code = None;
  }

  pub fn set_city(&mut self, city: String) {
    self.city = Some(city);
  }

  pub fn with_city(mut self, city: String) -> Address {
    self.city = Some(city);
    self
  }

  pub fn city(&self) -> Option<&String> {
    self.city.as_ref()
  }

  pub fn reset_city(&mut self) {
    self.city = None;
  }

}



