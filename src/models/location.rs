/* 
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Location {
  #[serde(rename = "place_id")]
  place_id: Option<String>,
  #[serde(rename = "licence")]
  licence: Option<String>,
  #[serde(rename = "osm_type")]
  osm_type: Option<String>,
  #[serde(rename = "osm_id")]
  osm_id: Option<String>,
  #[serde(rename = "boundingbox")]
  boundingbox: Option<Vec<String>>,
  #[serde(rename = "lat")]
  lat: Option<String>,
  #[serde(rename = "lon")]
  lon: Option<String>,
  #[serde(rename = "display_name")]
  display_name: Option<String>,
  #[serde(rename = "class")]
  class: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "importance")]
  importance: Option<f32>,
  #[serde(rename = "address")]
  address: Option<::models::Address>,
  #[serde(rename = "namedetails")]
  namedetails: Option<::models::Namedetails>
}

impl Location {
  pub fn new() -> Location {
    Location {
      place_id: None,
      licence: None,
      osm_type: None,
      osm_id: None,
      boundingbox: None,
      lat: None,
      lon: None,
      display_name: None,
      class: None,
      _type: None,
      importance: None,
      address: None,
      namedetails: None
    }
  }

  pub fn set_place_id(&mut self, place_id: String) {
    self.place_id = Some(place_id);
  }

  pub fn with_place_id(mut self, place_id: String) -> Location {
    self.place_id = Some(place_id);
    self
  }

  pub fn place_id(&self) -> Option<&String> {
    self.place_id.as_ref()
  }

  pub fn reset_place_id(&mut self) {
    self.place_id = None;
  }

  pub fn set_licence(&mut self, licence: String) {
    self.licence = Some(licence);
  }

  pub fn with_licence(mut self, licence: String) -> Location {
    self.licence = Some(licence);
    self
  }

  pub fn licence(&self) -> Option<&String> {
    self.licence.as_ref()
  }

  pub fn reset_licence(&mut self) {
    self.licence = None;
  }

  pub fn set_osm_type(&mut self, osm_type: String) {
    self.osm_type = Some(osm_type);
  }

  pub fn with_osm_type(mut self, osm_type: String) -> Location {
    self.osm_type = Some(osm_type);
    self
  }

  pub fn osm_type(&self) -> Option<&String> {
    self.osm_type.as_ref()
  }

  pub fn reset_osm_type(&mut self) {
    self.osm_type = None;
  }

  pub fn set_osm_id(&mut self, osm_id: String) {
    self.osm_id = Some(osm_id);
  }

  pub fn with_osm_id(mut self, osm_id: String) -> Location {
    self.osm_id = Some(osm_id);
    self
  }

  pub fn osm_id(&self) -> Option<&String> {
    self.osm_id.as_ref()
  }

  pub fn reset_osm_id(&mut self) {
    self.osm_id = None;
  }

  pub fn set_boundingbox(&mut self, boundingbox: Vec<String>) {
    self.boundingbox = Some(boundingbox);
  }

  pub fn with_boundingbox(mut self, boundingbox: Vec<String>) -> Location {
    self.boundingbox = Some(boundingbox);
    self
  }

  pub fn boundingbox(&self) -> Option<&Vec<String>> {
    self.boundingbox.as_ref()
  }

  pub fn reset_boundingbox(&mut self) {
    self.boundingbox = None;
  }

  pub fn set_lat(&mut self, lat: String) {
    self.lat = Some(lat);
  }

  pub fn with_lat(mut self, lat: String) -> Location {
    self.lat = Some(lat);
    self
  }

  pub fn lat(&self) -> Option<&String> {
    self.lat.as_ref()
  }

  pub fn reset_lat(&mut self) {
    self.lat = None;
  }

  pub fn set_lon(&mut self, lon: String) {
    self.lon = Some(lon);
  }

  pub fn with_lon(mut self, lon: String) -> Location {
    self.lon = Some(lon);
    self
  }

  pub fn lon(&self) -> Option<&String> {
    self.lon.as_ref()
  }

  pub fn reset_lon(&mut self) {
    self.lon = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> Location {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set_class(&mut self, class: String) {
    self.class = Some(class);
  }

  pub fn with_class(mut self, class: String) -> Location {
    self.class = Some(class);
    self
  }

  pub fn class(&self) -> Option<&String> {
    self.class.as_ref()
  }

  pub fn reset_class(&mut self) {
    self.class = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> Location {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_importance(&mut self, importance: f32) {
    self.importance = Some(importance);
  }

  pub fn with_importance(mut self, importance: f32) -> Location {
    self.importance = Some(importance);
    self
  }

  pub fn importance(&self) -> Option<&f32> {
    self.importance.as_ref()
  }

  pub fn reset_importance(&mut self) {
    self.importance = None;
  }

  pub fn set_address(&mut self, address: ::models::Address) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: ::models::Address) -> Location {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&::models::Address> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_namedetails(&mut self, namedetails: ::models::Namedetails) {
    self.namedetails = Some(namedetails);
  }

  pub fn with_namedetails(mut self, namedetails: ::models::Namedetails) -> Location {
    self.namedetails = Some(namedetails);
    self
  }

  pub fn namedetails(&self) -> Option<&::models::Namedetails> {
    self.namedetails.as_ref()
  }

  pub fn reset_namedetails(&mut self) {
    self.namedetails = None;
  }

}



