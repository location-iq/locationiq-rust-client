/*
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Location {
    #[serde(rename = "distance", skip_serializing_if = "Option::is_none")]
    pub distance: Option<f32>,
    #[serde(rename = "place_id", skip_serializing_if = "Option::is_none")]
    pub place_id: Option<String>,
    #[serde(rename = "licence", skip_serializing_if = "Option::is_none")]
    pub licence: Option<String>,
    #[serde(rename = "osm_type", skip_serializing_if = "Option::is_none")]
    pub osm_type: Option<String>,
    #[serde(rename = "osm_id", skip_serializing_if = "Option::is_none")]
    pub osm_id: Option<String>,
    #[serde(rename = "boundingbox", skip_serializing_if = "Option::is_none")]
    pub boundingbox: Option<Vec<String>>,
    #[serde(rename = "lat", skip_serializing_if = "Option::is_none")]
    pub lat: Option<String>,
    #[serde(rename = "lon", skip_serializing_if = "Option::is_none")]
    pub lon: Option<String>,
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "class", skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "importance", skip_serializing_if = "Option::is_none")]
    pub importance: Option<f32>,
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<crate::models::Address>,
    #[serde(rename = "namedetails", skip_serializing_if = "Option::is_none")]
    pub namedetails: Option<crate::models::Namedetails>,
    #[serde(rename = "matchquality", skip_serializing_if = "Option::is_none")]
    pub matchquality: Option<crate::models::Matchquality>,
}

impl Location {
    pub fn new() -> Location {
        Location {
            distance: None,
            place_id: None,
            licence: None,
            osm_type: None,
            osm_id: None,
            boundingbox: None,
            lat: None,
            lon: None,
            display_name: None,
            class: None,
            _type: None,
            importance: None,
            address: None,
            namedetails: None,
            matchquality: None,
        }
    }
}


